const params = new URLSearchParams(window.location.search);
const fileId = params.get("id");
const vk_oid = params.get('vk_oid');
const vk_id = params.get('vk_id');
const vk_hash = params.get('vk_hash');
const titleFromUrl = params.get("title");
const posterFromUrl = params.get("poster");
const categoryFromUrl = params.get("category");
const descriptionFromUrl = params.get("description");

const videoFrame = document.getElementById("videoFrame");
const playerContainer = document.getElementById("player-container");
const mediaTitle = document.getElementById("mediaTitle");
const mediaCategory = document.getElementById("mediaCategory");
const mediaPoster = document.getElementById("mediaPoster");
const mediaDescription = document.getElementById("mediaDescription");
const netStatus = document.getElementById("netStatus");
const pingResult = document.getElementById("pingResult");
const shareBtn = document.getElementById("shareBtn");
const shareLink = document.getElementById("shareLink");
const streamError = document.getElementById("streamError");
const pingChart = document.getElementById("pingChart");
const ctx = pingChart.getContext("2d");

let pingHistory = [];

async function fetchPlaylist() {
  try {
    const response = await fetch("PLGD-berlandbor-1.json?ts=" + Date.now()); // cache-buster
    const json = await response.json();
    if (!Array.isArray(json)) throw new Error("–ü–ª–µ–π–ª–∏—Å—Ç –Ω–µ –º–∞—Å—Å–∏–≤!");
    return json;
  } catch (e) {
    console.warn('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–ª–µ–π–ª–∏—Å—Ç–∞:', e);
    return null;
  }
}

async function initPlayer() {
  let isVK = (vk_oid && vk_id && vk_hash);
  let shareUrl, title, cat, poster, desc;

  // --- VK –≤–∏–¥–µ–æ ---
  if (isVK) {
    const vk_url = `https://vk.com/video_ext.php?oid=${vk_oid}&id=${vk_id}&hash=${vk_hash}`;
    playerContainer.innerHTML = `
      <iframe id="videoFrame" src="${vk_url}" width="720" height="420" frameborder="0" allowfullscreen allow="autoplay; encrypted-media"></iframe>
    `;

    // –ü–æ–ª—É—á–∞–µ–º –ø–ª–µ–π–ª–∏—Å—Ç
    const playlist = await fetchPlaylist();
    let media = null;

    if (playlist) {
      // –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      console.log('--- VK –ø–æ–∏—Å–∫ ---');
      console.log('–ü–ª–µ–π–ª–∏—Å—Ç:', playlist);
      console.log('URL –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:', {vk_oid, vk_id, vk_hash});
      media = playlist.find(item =>
        String(item.vk_oid) === String(vk_oid) &&
        String(item.vk_id) === String(vk_id) &&
        String(item.vk_hash) === String(vk_hash)
      );
      console.log('VK –Ω–∞–π–¥–µ–Ω–æ:', media);
    }

    if (media) {
      title = media.title || "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è";
      cat = media.category || "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏";
      poster = media.poster || "https://vk.com/images/video_placeholder.png";
      desc = media.description || "";
    } else {
      title = titleFromUrl || "VK-–≤–∏–¥–µ–æ";
      cat = categoryFromUrl || "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏";
      poster = posterFromUrl || "https://vk.com/images/video_placeholder.png";
      desc = descriptionFromUrl || "";
    }
    mediaTitle.textContent = title;
    mediaCategory.textContent = cat;
    mediaPoster.src = poster;
    mediaDescription.textContent = desc;

    // –°—Å—ã–ª–∫–∞ —Ç–æ–ª—å–∫–æ —Å VK-–ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    const shareParams = new URLSearchParams({
      vk_oid: vk_oid,
      vk_id: vk_id,
      vk_hash: vk_hash
    });
    shareUrl = `${location.origin}${location.pathname}?${shareParams.toString()}`;
  }

  // --- Google Drive –≤–∏–¥–µ–æ ---
  else if (fileId) {
    const url = `https://drive.google.com/file/d/${fileId}/preview`;
    if (playerContainer) {
      playerContainer.innerHTML = `<iframe id="videoFrame" src="${url}" width="720" height="420" frameborder="0" allowfullscreen></iframe>`;
    } else if (videoFrame) {
      videoFrame.src = url;
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø–ª–µ–π–ª–∏—Å—Ç
    const playlist = await fetchPlaylist();
    let media = null;
    if (playlist) {
      // –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      console.log('--- GD –ø–æ–∏—Å–∫ ---');
      console.log('–ü–ª–µ–π–ª–∏—Å—Ç:', playlist);
      console.log('URL –ø–∞—Ä–∞–º–µ—Ç—Ä id:', fileId);
      media = playlist.find(item => String(item.id) === String(fileId));
      console.log('GD –Ω–∞–π–¥–µ–Ω–æ:', media);
    }
    if (media) {
      title = media.title || "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è";
      cat = media.category || "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏";
      poster = media.poster || `https://drive.google.com/thumbnail?id=${media.id}`;
      desc = media.description || "";
    } else {
      title = titleFromUrl || "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è";
      cat = categoryFromUrl || "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏";
      poster = posterFromUrl || `https://drive.google.com/thumbnail?id=${fileId}`;
      desc = descriptionFromUrl || "";
    }
    mediaTitle.textContent = title;
    mediaCategory.textContent = cat;
    mediaPoster.src = poster;
    mediaDescription.textContent = desc;

    // –°—Å—ã–ª–∫–∞ —Ç–æ–ª—å–∫–æ —Å id
    const shareParams = new URLSearchParams({
      id: fileId
    });
    shareUrl = `${location.origin}${location.pathname}?${shareParams.toString()}`;
  } else {
    document.body.innerHTML = "<p>‚ùå –û—à–∏–±–∫–∞: –º–µ–¥–∏–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ</p>";
    return;
  }

  // –ö–Ω–æ–ø–∫–∞ "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è"
  if (shareBtn) {
    shareBtn.addEventListener("click", () => {
      let shareText = `üé¨ ${title}\n`;
      if (cat) shareText += `–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${cat}\n`;
      if (desc) shareText += `${desc}\n`;
      if (poster) shareText += `–ü–æ—Å—Ç–µ—Ä: ${poster}\n`;
      shareText += `–°–º–æ—Ç—Ä–µ—Ç—å: ${shareUrl}`;
      navigator.clipboard.writeText(shareText).then(() => {
        shareLink.textContent = `–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞: ${title}. - –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è!`;
      });
    });
  }

  // –ü–∏–Ω–≥ –¥–æ Google
  async function pingGoogle() {
    const start = performance.now();
    try {
      await fetch("https://www.google.com/favicon.ico", { mode: "no-cors" });
      const latency = Math.round(performance.now() - start);
      pingResult.textContent = latency;
      netStatus.textContent = "üü¢ –û–Ω–ª–∞–π–Ω";
      pingHistory.push(latency);
      if (pingHistory.length > 50) pingHistory.shift();
      drawPingChart();
    } catch {
      netStatus.textContent = "üî¥ –ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–µ—Ç—å—é";
      pingResult.textContent = "‚Äì";
      pingHistory.push(100);
      if (pingHistory.length > 50) pingHistory.shift();
      drawPingChart();
    }
  }

  function drawPingChart() {
    ctx.clearRect(0, 0, pingChart.width, pingChart.height);
    ctx.beginPath();
    pingHistory.forEach((val, i) => {
      const x = (i / pingHistory.length) * pingChart.width;
      const y = pingChart.height - Math.min(val, 200) / 2;
      if (i === 0) ctx.moveTo(x, y);
      else ctx.lineTo(x, y);
    });
    ctx.strokeStyle = "#00ff00";
    ctx.stroke();
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Ç–æ–∫–∞
  function monitorIframeLoad() {
    setTimeout(() => {
      try {
        const frame = document.getElementById("videoFrame");
        const doc = frame?.contentDocument || frame?.contentWindow?.document;
        const bodyText = doc?.body?.innerText || "";
        if (bodyText.toLowerCase().includes("exceeded") || bodyText.length < 30) {
          streamError.style.display = "block";
        }
      } catch (e) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫—Ä–æ—Å—Å-–¥–æ–º–µ–Ω –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
      }
    }, 7000);
  }

  setInterval(pingGoogle, 1000);
  pingGoogle();
  monitorIframeLoad();
}

// –°—Ç–∞—Ä—Ç—É–µ–º!
initPlayer();