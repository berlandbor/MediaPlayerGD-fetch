const params = new URLSearchParams(window.location.search);
const fileId = params.get("id");

const videoFrame = document.getElementById("videoFrame");
const mediaTitle = document.getElementById("mediaTitle");
const mediaCategory = document.getElementById("mediaCategory");
const mediaPoster = document.getElementById("mediaPoster");
const mediaDescription = document.getElementById("mediaDescription");
const netStatus = document.getElementById("netStatus");
const pingResult = document.getElementById("pingResult");
const shareBtn = document.getElementById("shareBtn");
const shareLink = document.getElementById("shareLink");
const streamError = document.getElementById("streamError");
const pingChart = document.getElementById("pingChart");
const ctx = pingChart.getContext("2d");

let pingHistory = [];

if (!fileId) {
  document.body.innerHTML = "<p>‚ùå –û—à–∏–±–∫–∞: –º–µ–¥–∏–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ</p>";
} else {
  const url = `https://drive.google.com/file/d/${fileId}/preview`;
  videoFrame.src = url;

  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ localStorage
  const playlistRaw = localStorage.getItem("gdrive_playlist");
  if (playlistRaw) {
    try {
      const playlist = JSON.parse(playlistRaw);
      const media = playlist.find(item => item.id === fileId);

      if (media) {
        mediaTitle.textContent = media.title || "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è";
        mediaCategory.textContent = media.category || "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏";
        mediaPoster.src = media.poster || `https://drive.google.com/thumbnail?id=${media.id}`;
        mediaDescription.textContent = media.description || "";
      } else {
        mediaTitle.textContent = "–ú–µ–¥–∏–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ";
      }
    } catch (e) {
      console.warn("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è localStorage:", e);
    }
  }

  // –ö–Ω–æ–ø–∫–∞ "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è"
  const fullLink = `${location.origin}${location.pathname}?id=${fileId}`;
  shareBtn.addEventListener("click", () => {
    navigator.clipboard.writeText(fullLink).then(() => {
      shareLink.textContent = `–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞: ${fullLink}`;
    });
  });

  // –ü–∏–Ω–≥ –¥–æ Google
  async function pingGoogle() {
    const start = performance.now();
    try {
      await fetch("https://www.google.com/favicon.ico", { mode: "no-cors" });
      const latency = Math.round(performance.now() - start);
      pingResult.textContent = latency;
      netStatus.textContent = "üü¢ –û–Ω–ª–∞–π–Ω";

      pingHistory.push(latency);
      if (pingHistory.length > 50) pingHistory.shift();
      drawPingChart();
    } catch {
      netStatus.textContent = "üî¥ –ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–µ—Ç—å—é";
      pingResult.textContent = "‚Äì";

      pingHistory.push(100);
      if (pingHistory.length > 50) pingHistory.shift();
      drawPingChart();
    }
  }

  function drawPingChart() {
    ctx.clearRect(0, 0, pingChart.width, pingChart.height);
    ctx.beginPath();
    pingHistory.forEach((val, i) => {
      const x = (i / pingHistory.length) * pingChart.width;
      const y = pingChart.height - Math.min(val, 200) / 2; // –º–∞—Å—à—Ç–∞–±
      if (i === 0) ctx.moveTo(x, y);
      else ctx.lineTo(x, y);
    });
    ctx.strokeStyle = "#00ff00";
    ctx.stroke();
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Ç–æ–∫–∞
  function monitorIframeLoad() {
    setTimeout(() => {
      try {
        const doc = videoFrame.contentDocument || videoFrame.contentWindow?.document;
        const bodyText = doc?.body?.innerText || "";
        if (bodyText.toLowerCase().includes("exceeded") || bodyText.length < 30) {
          streamError.style.display = "block";
        }
      } catch (e) {
        // –ë—Ä–∞—É–∑–µ—Ä –±–ª–æ–∫–∏—Ä—É–µ—Ç –¥–æ—Å—Ç—É–ø –∫ iframe —Å –¥—Ä—É–≥–æ–≥–æ –¥–æ–º–µ–Ω–∞ ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
        console.warn("iframe cross-origin –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞:", e);
      }
    }, 7000);
  }

  // –ó–∞–ø—É—Å–∫
  setInterval(pingGoogle, 1000);
  pingGoogle();
  monitorIframeLoad();
}
